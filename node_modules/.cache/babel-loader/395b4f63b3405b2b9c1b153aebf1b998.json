{"ast":null,"code":"export const getUserData = async userName => {\n  let userData = await fetch(`https://api.github.com/users/${userName}`).then(res => res.json()).catch(() => {});\n  return userData;\n};\nexport const getUserEvents = async received_events_url => {\n  let userEventsData = await fetch(received_events_url).then(res => res.json()).catch(() => {});\n  return userEventsData;\n};\nexport const getUserRepositories = async userName => {\n  const repos = await fetch(`https://api.github.com/users/${userName}/repos`).then(res => res.json());\n  let reposList = [];\n\n  for (let repo of repos) {\n    reposList.push({\n      owner: repo.owner.login,\n      name: repo.name,\n      forks: repo.forks,\n      private: repo.private,\n      description: repo.description\n    });\n  }\n\n  return reposList;\n};\nexport const getUserFollowers = async userName => {\n  const followers = await fetch(`https://api.github.com/users/${userName}/followers`).then(res => res.json());\n  let followersList = [];\n\n  for (let follower of followers) {\n    followersList.push({\n      id: follower.id,\n      name: follower.login,\n      detail: follower.url,\n      type: follower.type\n    });\n  }\n\n  return followersList;\n};\nexport const getUserSubscriptons = async userName => {\n  const subscriptions = await fetch(`https://api.github.com/users/${userName}/subscriptions`).then(res => res.json());\n  let subscriptionsList = [];\n\n  for (let subscription of subscriptions) {\n    subscriptionsList.push({\n      name: subscription.name,\n      private: subscription.private,\n      description: subscription.description,\n      html_url: subscription.html_url\n    });\n  }\n\n  return subscriptionsList;\n};","map":{"version":3,"names":["getUserData","userName","userData","fetch","then","res","json","catch","getUserEvents","received_events_url","userEventsData","getUserRepositories","repos","reposList","repo","push","owner","login","name","forks","private","description","getUserFollowers","followers","followersList","follower","id","detail","url","type","getUserSubscriptons","subscriptions","subscriptionsList","subscription","html_url"],"sources":["C:/GitCat v3/GitCat/src/services/fetchUser.js"],"sourcesContent":["export const getUserData = async (userName) => {\r\n  let userData = await fetch(`https://api.github.com/users/${userName}`)\r\n    .then((res) => res.json())\r\n    .catch(() => {});\r\n  return userData;\r\n};\r\n\r\nexport const getUserEvents = async (received_events_url) => {\r\n  let userEventsData = await fetch(received_events_url)\r\n    .then((res) => res.json())\r\n    .catch(() => {});\r\n  return userEventsData;\r\n};\r\n\r\nexport const getUserRepositories = async (userName) => {\r\n  const repos = await fetch(\r\n    `https://api.github.com/users/${userName}/repos`\r\n  ).then((res) => res.json());\r\n  let reposList = [];\r\n  for (let repo of repos) {\r\n    reposList.push({\r\n      owner: repo.owner.login,\r\n      name: repo.name,\r\n      forks: repo.forks,\r\n      private: repo.private,\r\n      description: repo.description,\r\n    });\r\n  }\r\n  return reposList;\r\n};\r\n\r\nexport const getUserFollowers = async (userName) => {\r\n  const followers = await fetch(\r\n    `https://api.github.com/users/${userName}/followers`\r\n  ).then((res) => res.json());\r\n  let followersList = [];\r\n  for (let follower of followers) {\r\n    followersList.push({\r\n      id: follower.id,\r\n      name: follower.login,\r\n      detail: follower.url,\r\n      type: follower.type,\r\n    });\r\n  }\r\n  return followersList;\r\n};\r\n\r\nexport const getUserSubscriptons = async (userName) => {\r\n  const subscriptions = await fetch(\r\n    `https://api.github.com/users/${userName}/subscriptions`\r\n  ).then((res) => res.json());\r\n  let subscriptionsList = [];\r\n  for (let subscription of subscriptions) {\r\n    subscriptionsList.push({\r\n      name: subscription.name,\r\n      private: subscription.private,\r\n      description: subscription.description,\r\n      html_url: subscription.html_url,\r\n    });\r\n  }\r\n  return subscriptionsList;\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,MAAOC,QAAP,IAAoB;EAC7C,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BF,QAAS,EAA1C,CAAL,CAClBG,IADkB,CACZC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADI,EAElBC,KAFkB,CAEZ,MAAM,CAAE,CAFI,CAArB;EAGA,OAAOL,QAAP;AACD,CALM;AAOP,OAAO,MAAMM,aAAa,GAAG,MAAOC,mBAAP,IAA+B;EAC1D,IAAIC,cAAc,GAAG,MAAMP,KAAK,CAACM,mBAAD,CAAL,CACxBL,IADwB,CAClBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADU,EAExBC,KAFwB,CAElB,MAAM,CAAE,CAFU,CAA3B;EAGA,OAAOG,cAAP;AACD,CALM;AAOP,OAAO,MAAMC,mBAAmB,GAAG,MAAOV,QAAP,IAAoB;EACrD,MAAMW,KAAK,GAAG,MAAMT,KAAK,CACtB,gCAA+BF,QAAS,QADlB,CAAL,CAElBG,IAFkB,CAEZC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAFI,CAApB;EAGA,IAAIO,SAAS,GAAG,EAAhB;;EACA,KAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;IACtBC,SAAS,CAACE,IAAV,CAAe;MACbC,KAAK,EAAEF,IAAI,CAACE,KAAL,CAAWC,KADL;MAEbC,IAAI,EAAEJ,IAAI,CAACI,IAFE;MAGbC,KAAK,EAAEL,IAAI,CAACK,KAHC;MAIbC,OAAO,EAAEN,IAAI,CAACM,OAJD;MAKbC,WAAW,EAAEP,IAAI,CAACO;IALL,CAAf;EAOD;;EACD,OAAOR,SAAP;AACD,CAfM;AAiBP,OAAO,MAAMS,gBAAgB,GAAG,MAAOrB,QAAP,IAAoB;EAClD,MAAMsB,SAAS,GAAG,MAAMpB,KAAK,CAC1B,gCAA+BF,QAAS,YADd,CAAL,CAEtBG,IAFsB,CAEhBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAFQ,CAAxB;EAGA,IAAIkB,aAAa,GAAG,EAApB;;EACA,KAAK,IAAIC,QAAT,IAAqBF,SAArB,EAAgC;IAC9BC,aAAa,CAACT,IAAd,CAAmB;MACjBW,EAAE,EAAED,QAAQ,CAACC,EADI;MAEjBR,IAAI,EAAEO,QAAQ,CAACR,KAFE;MAGjBU,MAAM,EAAEF,QAAQ,CAACG,GAHA;MAIjBC,IAAI,EAAEJ,QAAQ,CAACI;IAJE,CAAnB;EAMD;;EACD,OAAOL,aAAP;AACD,CAdM;AAgBP,OAAO,MAAMM,mBAAmB,GAAG,MAAO7B,QAAP,IAAoB;EACrD,MAAM8B,aAAa,GAAG,MAAM5B,KAAK,CAC9B,gCAA+BF,QAAS,gBADV,CAAL,CAE1BG,IAF0B,CAEpBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAFY,CAA5B;EAGA,IAAI0B,iBAAiB,GAAG,EAAxB;;EACA,KAAK,IAAIC,YAAT,IAAyBF,aAAzB,EAAwC;IACtCC,iBAAiB,CAACjB,IAAlB,CAAuB;MACrBG,IAAI,EAAEe,YAAY,CAACf,IADE;MAErBE,OAAO,EAAEa,YAAY,CAACb,OAFD;MAGrBC,WAAW,EAAEY,YAAY,CAACZ,WAHL;MAIrBa,QAAQ,EAAED,YAAY,CAACC;IAJF,CAAvB;EAMD;;EACD,OAAOF,iBAAP;AACD,CAdM"},"metadata":{},"sourceType":"module"}